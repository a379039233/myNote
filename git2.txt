之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。
需要把现有仓库导出为裸仓库——即一个不包含当前工作目录的仓库。 --bare
git add -u 将本地有改动(包括删除和修改)的路径的已经追踪的
文件标记到暂存区中。
git add -A 使用-A参数会将添加所有改动的已跟踪文件和未跟踪文件。reset git config --list
//------------start 
git config --global user.name "ly"
git config --global user.email "123@qq.com"
git config --system alias.st status //all user
git config --global alias.co commit //local user   配置文件修改
git config --system alias.ch checkout
git config --system alias.br branch
git init   //branch master 
echo "111" > 1.txt
git st
git add -A
git co -m "111"
git log

echo "222" > 2.txt
git add -A
git co -m "222"

git reset --hard head^        //git reset --hard 3628164 取消回退
git log
//------------end  line62:branch
git reflog用来记录你的每一次命令
ae6383c HEAD@{1}: commit: 222
时光机。git reset --hard ae6383c

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
第一次修改 -> git add -> 第二次修改 -> git add -> git commit
//111
git checkout -- file可以丢弃工作区的修改 //no add
总之，就是让这个文件回到最近一次git commit或git add时的状态。
git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区//always add
git reset --hard HEAD^  //版本回退
//end111
命令git rm用于删除一个文件。
Git 同步　　　　　　　　　　　　　　 // 相当于命令行~: git push origin master
git reset head file //remove from stage
git reset --hard head^3 会将最新的三次提交全部重置，就像没有提交过一样
git reset --hard commit_id //回退到某个版本

“有了远程仓库，妈妈再也不用担心我的硬盘了。”——Git点读机
// 添加远程库
git remote add origin git@github.com:michaelliao/learngit.git
$ git push origin master
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
、、//
克隆一个仓库
git clone git@github.com:michaelliao/gitskills.git //git协议最快
git checkout -b dev //add commit
git checkout master //st
git merge dev 
git branch -d dev
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
//////////////
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
//
无法提交，幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
git checkout -b issue-101 。。。。
git stash pop
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
。开发一个新feature，最好新建一个分支；

。如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
要查看远程库的信息，用git remote：
$ git push origin master //推送分支
git push origin dev
/////////////
多人协作

阅读: 135106
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。

要查看远程库的信息，用git remote：

$ git remote
origin
或者，用git remote -v显示更详细的信息：

$ git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

推送分支

推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：

$ git push origin master
如果要推送其他分支，比如dev，就改成：

$ git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？

master分支是主分支，因此要时刻与远程同步；

dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！

抓取分支

多人协作时，大家都会往master和dev分支上推送各自的修改。

现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：

$ git pull
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:michaelliao/learngit
   fc38031..291bea8  dev        -> origin/dev
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream dev origin/<branch>
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：

$ git branch --set-upstream dev origin/dev
Branch dev set up to track remote branch dev from origin.
再pull：

$ git pull
Auto-merging hello.py
CONFLICT (content): Merge conflict in hello.py
Automatic merge failed; fix conflicts and then commit the result.
这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：

$ git commit -m "merge & fix hello.py"
[dev adca45d] merge & fix hello.py
$ git push origin dev
Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (6/6), 747 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
   291bea8..adca45d  dev -> dev
 因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
////////////////////
“我要找的commit id是打了tag “v1.1”的那个版本”  里程碑
标签也是版本库的一个快照。
git tag v1.0
git tag
git log --pretty=oneline --abbrev-commit
git tag v0.9 6224937  //历史标签
git tag -a v0.1 -m "version 0.1 released" 3628164
git show v0.1
git tag -d v0.1
git push origin v1.0 //推送标签
git push origin --tags //all
  命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore
  
  git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
  git lg
  //
  有冲突的话,TortoiseGit-->Edit conflicts 比较之后解决冲突之后 TortoiseGit-->Resolve然后commit和push
  
  
  
 
 
 






